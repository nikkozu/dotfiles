#!/usr/bin/env python
import sys
import os
import re
import argparse
from youtube_search import YoutubeSearch

class PlayYoutube():
    def __init__(self, query=None, res=None, audio=None):
        self.query = query
        self.res   = res
        self.audio = audio

    def play_vid(self, url=None):
        vid_url = ' '.join(self.query) if not bool(url) else url
        vid_info = self.yt_res(vid_url).pop(0)
        print(vid_info)

        self.clear()
        os.system(f"kitty +kitten icat https://img.youtube.com/vi/{vid_info['id']}/mqdefault.jpg")
        print(f"Now Playing: {vid_info['title']}")
        print(f"Video ID: {vid_info['id']}")
        print(f"Duration: {vid_info['duration']}\n")
        os.system(f"mpv --ytdl-format=\"{self.ytdl_format()}\" {vid_url}")

    def play_query(self):
        yt_search = yt_play.yt_res()

        self.clear()
        for i, res in enumerate(yt_search):
            print(f"{i+1}. {res['title']} [{res['duration']}]")

        select = int(input("Select Video to Play: ") or 1) -1
        yt_url = f"https://youtu.be/{yt_search[select]['id']}"
        self.play_vid(yt_url)

    def ytdl_format(self):
        video_res = f"height<=?{'480' if not bool(self.res) else self.res}"
        return f"{'bestvideo['+video_res+'][vcodec!=vp9]+' if not self.audio else ''}bestaudio/best"

    def is_url(self):
        q = ' '.join(self.query)
        matched = re.match(
            "http(?:s?):\/\/(?:www\.)?youtu(?:be\.com\/watch\?v=|\.be\/)([\w\-\_]*)(&(amp;)?‌​[\w\?‌​=]*)?", q)
        return bool(matched)

    def yt_res(self, url=None):
        q = ' '.join(self.query) if not bool(url) else url
        return YoutubeSearch(q, max_results=10).to_dict()

    def clear(self):
        os.system('cls' if os.name == 'nt' else 'clear')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--audio", action="store_true", help="play in audio mode")
    parser.add_argument("-r", "--res", nargs='?', help="specify the resolution for video, default: 480")
    parser.add_argument("query", nargs='+', help="searching query")
    args = parser.parse_args()

    yt_play = PlayYoutube()
    parser.parse_args(namespace=yt_play)

    yt_play.play_query() if not yt_play.is_url() else yt_play.play_vid()
    # print(vars(yt_play))
